apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: plex-config-pvc
  namespace: media
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 100Mi
  volumeName: plex-config-pv

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: radarr-config-pvc
  namespace: media
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 100Mi
  volumeName: radarr-config-pv

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarr-config-pvc
  namespace: media
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 100Mi
  volumeName: sonarr-config-pv

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: overseerr-config-pvc
  namespace: media
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 100Mi
  volumeName: overseerr-config-pv

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prowlarr-config-pvc
  namespace: media
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 100Mi
  volumeName: prowlarr-config-pv

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: lidarr-config-pvc
  namespace: media
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 100Mi
  volumeName: lidarr-config-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sabnzbd-config-pvc
  namespace: media
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 100Mi
  volumeName: sabnzbd-config-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bazarr-config-pvc
  namespace: media
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 100Mi
  volumeName: bazarr-config-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: k3s-data-pvc
  namespace: media
spec:
  accessModes:
    - ReadWriteMany
  resources:
      requests:
        storage: 30Ti
  storageClassName: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rr-env
  namespace: media
data:
  TZ: "America/Kentucky/Louisville"
  PUID: "1000"
  PGID: "1000"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: overseerr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: overseerr
  template:
    metadata:
      labels:
        app: overseerr
    spec:
      containers:
      - name: overseerr
        image: sctx/overseerr:latest
        envFrom:
        - configMapRef:
            name: rr-env
        volumeMounts:
        - name: config
          mountPath: /config
        ports:
        - containerPort: 5055
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: overseerr-config-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: overseerr
  namespace: media
spec:
  selector:
    app: overseerr
  ports:
  - protocol: TCP
    port: 5055
    targetPort: 5055
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: overseerr-ingress
  namespace: media
spec:
  ingressClassName: cilium
  rules:
  - host: overseerr.fletcherlabs.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: overseerr
            port:
              number: 5055
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prowlarr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prowlarr
  template:
    metadata:
      labels:
        app: prowlarr
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: prowlarr
        image: lscr.io/linuxserver/prowlarr:develop
        envFrom:
        - configMapRef:
            name: rr-env
        volumeMounts:
        - name: config
          mountPath: /config
        ports:
        - containerPort: 9696
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: prowlarr-config-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prowlarr
  namespace: media
spec:
  selector:
    app: prowlarr
  ports:
  - protocol: TCP
    port: 9696
    targetPort: 9696
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prowlarr-ingress
  namespace: media
spec:
  ingressClassName: cilium
  rules:
  - host: prowlarr.fletcherlabs.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prowlarr
            port:
              number: 9696
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: sonarr
        image: lscr.io/linuxserver/sonarr:latest
        envFrom:
        - configMapRef:
            name: rr-env
        volumeMounts:
        - name: config
          mountPath: /config
        - name: media
          mountPath: /media 
        ports:
        - containerPort: 8989
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: sonarr-config-pvc
      - name: media
        persistentVolumeClaim:
          claimName: k3s-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: sonarr
  namespace: media
spec:
  selector:
    app: sonarr
  ports:
  - protocol: TCP
    port: 8989
    targetPort: 8989
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sonarr-ingress
  namespace: media
spec:
  ingressClassName: cilium
  rules:
  - host: sonarr.fletcherlabs.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sonarr
            port:
              number: 8989
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000      
      containers:
      - name: radarr
        image: lscr.io/linuxserver/radarr:latest
        envFrom:
        - configMapRef:
            name: rr-env
        volumeMounts:
        - name: config
          mountPath: /config
        - name: media
          mountPath: /media
        ports:
        - containerPort: 7878
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: radarr-config-pvc
      - name: media
        persistentVolumeClaim:
          claimName: k3s-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: radarr
  namespace: media
spec:
  selector:
    app: radarr
  ports:
  - protocol: TCP
    port: 7878
    targetPort: 7878
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: radarr-ingress
  namespace: media
spec:
  ingressClassName: cilium
  rules:
  - host: radarr.fletcherlabs.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: radarr
            port:
              number: 7878
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lidarr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lidarr
  template:
    metadata:
      labels:
        app: lidarr
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: lidarr
        image: lscr.io/linuxserver/lidarr:latest
        envFrom:
        - configMapRef:
            name: rr-env
        volumeMounts:
        - name: config
          mountPath: /config
        - name: media
          mountPath: /media
        ports:
        - containerPort: 8686
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: lidarr-config-pvc
      - name: media
        persistentVolumeClaim:
          claimName: k3s-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: lidarr
  namespace: media
spec:
  selector:
    app: lidarr
  ports:
  - protocol: TCP
    port: 8686
    targetPort: 8686
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: lidarr-ingress
  namespace: media
spec:
  ingressClassName: cilium
  rules:
  - host: lidarr.fletcherlabs.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: lidarr
            port:
              number: 8686
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bazarr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bazarr
  template:
    metadata:
      labels:
        app: bazarr
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: bazarr
        image: lscr.io/linuxserver/bazarr:latest
        envFrom:
        - configMapRef:
            name: rr-env
        volumeMounts:
        - name: config
          mountPath: /config
        - name: data
          mountPath: /data
        ports:
        - containerPort: 6767
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: bazarr-config-pvc
      - name: data
        persistentVolumeClaim:
          claimName: k3s-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: bazarr
  namespace: media
spec:
  selector:
    app: bazarr
  ports:
  - protocol: TCP
    port: 6767
    targetPort: 6767
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bazarr-ingress
  namespace: media
spec:
  ingressClassName: cilium
  rules:
  - host: bazarr.fletcherlabs.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bazarr
            port:
              number: 6767
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plex
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: plex
  template:
    metadata:
      labels:
        app: plex
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - k3s1
                - k3s2
      containers:
      - name: plex
        image: lscr.io/linuxserver/plex:latest
        envFrom:
        - configMapRef:
            name: rr-env
        volumeMounts:
        - name: config
          mountPath: /config
        - name: media
          mountPath: /media
        - name: transcode
          mountPath: /transcode
        - name: dri
          mountPath: /dev/dri
        ports:
        - containerPort: 32400
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: plex-config-pvc
      - name: media
        persistentVolumeClaim:
          claimName: k3s-data-pvc
      - name: transcode
        hostPath:
          path: /mnt/transcode
          type: Directory
      - name: dri
        hostPath:
          path: /dev/dri
          type: Directory
---
apiVersion: v1
kind: Service
metadata:
  name: plex
  namespace: media
spec:
  selector:
    app: plex
  ports:
  - protocol: TCP
    port: 32400
    targetPort: 32400
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: plex-ingress
  namespace: media
spec:
  ingressClassName: cilium
  rules:
  - host: plex.fletcherlabs.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: plex
            port:
              number: 32400
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sabnzbd
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sabnzbd
  template:
    metadata:
      labels:
        app: sabnzbd
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: sabnzbd
        image: lscr.io/linuxserver/sabnzbd:latest
        envFrom:
        - configMapRef:
            name: rr-env
        volumeMounts:
        - name: config
          mountPath: /config
        - name: temp-downloads
          mountPath: /data/incomplete  # Temporary downloads (hostPath)
        - name: media
          mountPath: /media
        ports:
        - containerPort: 8080
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: sabnzbd-config-pvc
      - name: temp-downloads
        hostPath:
          path: /mnt/scratch  # Use host path for temp downloads
          type: Directory
      - name: media
        persistentVolumeClaim:
          claimName: k3s-data-pvc  # Completed downloads on NFS storage
---
apiVersion: v1
kind: Service
metadata:
  name: sabnzbd
  namespace: media
spec:
  selector:
    app: sabnzbd
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sabnzbd-ingress
  namespace: media
spec:
  ingressClassName: cilium
  rules:
  - host: sabnzbd.fletcherlabs.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sabnzbd
            port:
              number: 8080
